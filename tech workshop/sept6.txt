leetcode 70

- seems to be a dynamic programming problem??

write down thought process first
- i would want to think about base cases
    - if i have 1 step: i can only climb 1 step
    - if i have 2 steps: i can climb (1+1) or i can climb 2 steps
- dynamic programming problem
    - split up how much you can climb
    - example: 3 steps 
        - first look:
            - 1 step taken, 2 steps left
            - 2 steps taken, 1 step left
        - second look:
            - 1 step taken, 1 step taken, 1 step left
            - 1 step taken, 2 steps taken
            - 2 steps taken, 1 step taken
        - third look    
            - 1 step taken, 1 step taken, 1 step taken
- process  
    - i would probably want to record how many steps was necessary for each remaining step left
        - if it's 1 step left i'd say 1 step taken
        - if it's 2 steps left, i'd say 1 step taken
        - if it's 3 steps left, i'd say 2 steps taken (best of 1st step and best of 2nd step)
        - if it's 4 steps, i'd say best of 3 + best of 1
- much like fibonacci problem

questions
- any restrictions for input n
    - a number between 1 and 45 (can't be 0)

other solutions
- can iteratively solve this one
    - use result of previous result to calculate next result
    - do bottom up approach
    - similar to mine

coming back together
-fibonacci sequence problem
    -DP(i) = DP(i-1) + DP(i-2)
    - you store the number of ways, not the best way actually

translsate into code
- speed up code from being exponential time to linear time by having a 1d array for memoization
- edge case (0)
    - 0, 1, 1, ... (fibonacci sequence)
- return the result at (i+1)

how to get better at these
- trying to diagram
- watch youtube solutions of these problems
- eventually start noticing after 50 or 60 problems

complexity
- time and space complexity would both be linear
- constant space
    - can use two integers (one storing second previous and another storing previous values calculated)
    - prev and curr
    - flow: for each iteration, curr += prev and prev = curr (would need 3 vars to keep track of this)


---solution---
stats: runtime is linear (0ms, beats 100%), space complexity is constant(39.05mb, beats 69.77%)
class Solution {
    public int climbStairs(int n) {

        int prev = 0;
        int curr = 1;
        int temp = 0;

        // should do it incrementally
        for(int i=0; i<n; i++){
            temp = prev+curr;
            prev = curr;
            curr = temp;
        }   

        return curr;
   
    }
}
